on:
  push:
    branches:
      - main
    paths:
      - 'image/**'
      - 'infra/**'
      - 'task-definition.template.json'
      - '.github/workflows/aws.yml'

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecs-deploy
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build --cache-from $ECR_REGISTRY/$ECR_REPOSITORY -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG image/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in account-specific values
      id: task-def-template
      env:
        FARGATE_SERVICE_FAMILY: ${{ secrets.FARGATE_SERVICE_FAMILY }}
        FARGATE_EXECUTION_ROLE_ARN: ${{ secrets.FARGATE_EXECUTION_ROLE_ARN }}
        AWS_LOGGROUP_NAME: ${{ secrets.AWS_LOGGROUP_NAME }}
        TASK_SECRET_ARN: ${{ secrets.TASK_SECRET_ARN }}
      run: |
        sed -e "s|FARGATE_SERVICE_FAMILY|${FARGATE_SERVICE_FAMILY}|" -e "s|FARGATE_EXECUTION_ROLE_ARN|${FARGATE_EXECUTION_ROLE_ARN}|" -e "s|AWS_LOGGROUP_NAME|${AWS_LOGGROUP_NAME}|" -e "s|TASK_SECRET_ARN|${TASK_SECRET_ARN}|" task-definition.template.json > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: web
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.FARGATE_SERVICE_NAME }}
        cluster: ${{ secrets.FARGATE_CLUSTER_NAME }}
        wait-for-service-stability: true

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ecs-deploy-service-codedeploy
    #     cluster: gergely-infra
    #     wait-for-service-stability: true
    #     codedeploy-appspec: appspec.json
    #     codedeploy-application: AppECS-gergely-infra-ecs-deploy-service-codedeploy
    #     codedeploy-deployment-group: DgpECS-gergely-infra-ecs-deploy-service-codedeploy
